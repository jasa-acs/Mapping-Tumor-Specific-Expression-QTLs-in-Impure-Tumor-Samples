set.seed(11)#
#
age       = sample(30:40, n)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
hist(age)
n = 20#
set.seed(11)#
#
age       = sample(30:40, n)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)
?sample
n = 20#
set.seed(11)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
n = 20#
set.seed(111)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
n = 20#
set.seed(1)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
n = 20#
set.seed(99)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 2)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
n = 20#
set.seed(99)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 1)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")#
#
write.table(X, sep = " & ",  eol = "\\\\\n", row.names = F, col.names = F)#
#
round(solve(t(X) %*% X),3)#
#
l1 = lm(y ~ -1 + age + education)#
summary(l1)#
anova(l1)
?scale
n = 20#
set.seed(111)#
#
age       = sample(30:50, n, replace=TRUE)#
z1        = round(rnorm(n, 0, 10))#
education = round(age + z1)#
#
X = cbind(age, education)#
X = scale(X, center = TRUE, scale = TRUE)#
#
y = X %*% c(1,1) + rnorm(n, 0, 1)#
y = y/sd(y)#
#
X = round(X, 2)#
y = round(y, 2)#
#
cat(y, sep=" \\\\")
mean(y)
library(isoform)
?isoDOT
?isoDU
?isoDOT
help(package="isoform")
? isoDu
names(pFH1)#
names(pFH2)#
#
pFH1[1,]#
pFH2[1,]#
#
y  = (-log10(p2) > 2 & -log10(p1) < 1)#
table(y)#
#
m1 = match(gnames, pFH1$genenames)#
m2 = match(gnames, pFH2$genenames)#
X  = cbind(-log10(pFH1[m1,3:6]), pFH1[m1,7:15], -log10(pFH2[m2,3:6]), pFH2[m2,7:16], log10(pFH1[m1,16:31] + 1))#
X  = data.matrix(X)#
colnames(X)[13]="vphi_trec"#
colnames(X)[26]="vphi_trecase"#
dim(X)#
#
cor(y,X)#
plot(as.numeric(cor(y,X)), type="h", ylab="cor", bty="n", xaxt="n", xlab="")#
mtext(colnames(X), side=1, at=1:ncol(X), las=3)
14 * 18
library(qvalue)
c1 = 1
fHap = sprintf("chr%d.%d.hap", c1, k1)#
fSNP = sprintf("chr%d.%d.snps", c1, k1)#
#
ww1 = which(ffs==fHap)#
if(length(ww1) != 1){ stop("ah... cannot find this file...\n") }
3502 + 827 + 1790 + 1702 + 768 + 872 + 1600
36 + 48 + 32 + 27 + 7 + 9
0.858+0.1884 + 0.5894
12024/14810
11677/14927
11820/14829
700/60
#
library(isoform)#
#
# ---------------------------------------------------------#
# read in annotation#
# ---------------------------------------------------------#
#
load("~/research/data/mouse/Mus_musculus.NCBIM37.67.nTE.RData")#
dim(nTE)#
nTE[1:2,]#
#
gtf  = "~/research/data/mouse/Mus_musculus.NCBIM37.67.updated.gtf"#
info = read.table(gtf, sep="\t", as.is=TRUE)#
#
names(info) = c("chr", "source", "feature", "start", "end", #
"score", "strand", "frame", "anno")#
#
dim(info)#
info[1:2,]
# --------------------------------------------------------- #
# cufflinks#
# --------------------------------------------------------- #
#
cuff1 = read.table("cufflinks/cuffdiff/with_anno/splicing.diff", #
header=TRUE, as.is=TRUE)#
dim(cuff1)#
cuff1[1:2,]#
table(cuff1$status)#
#
length(unique(cuff1$gene_id))#
#
cuff2 = read.table("cufflinks/cuffdiff/with_anno/promoters.diff", #
header=TRUE, as.is=TRUE)#
dim(cuff2)#
cuff2[1:2,]#
table(cuff2$status)#
#
length(unique(cuff2$gene_id))#
#
tapply(cuff2$p_value, cuff2$status, summary)#
tapply(cuff2$q_value, cuff2$status, summary)#
cuff2$p_value[which(cuff2$status=="FAIL")] = 1.0#
#
cAnno = read.table("cufflinks/cuffcompare/with_anno.combined.gtf", #
sep="\t", as.is=TRUE)#
#
names(cAnno)  = c("chr", "source", "feature", "start", "end", #
"score", "strand", "frame", "anno")#
dim(cAnno)#
cAnno[1:2,]
7e-4*3859/1
0.0015*3859/3
9e-4*3859/2
p.adjust
dat = read.csv("Desktop/express.csv")
dat = read.csv("Desktop/expression.csv")
dim(dat)
dat[1:5,]
p = dat$emipricalp
p
p = dat$empiricalp
hist(p)
lp <- length(p)#
#
i <- lp:1#
o <- order(p, decreasing = TRUE)
ro <- order(o)
p2         pmin(1, cummin(n/i * p[o]))[ro]
p2 =         pmin(1, cummin(n/i * p[o]))[ro]
n = length(p)
p2 =  pmin(1, cummin(n/i * p[o]))[ro]
p2
?cummin
p[o]
cummin(n/i * p[o])
plot(cummin(n/i * p[o]))
library(eMap)
library(MatrixEQTL)
320518 + 251663 + 258442 + 265456 + 272676
251663 + 258442 + 265456 + 272676 + 246000
566*2
pos1 = 1:110001
p = 2
print(c(((p-1)*100000-10000 +1), (p*100000+10000 + 1)))
pos = ((p-1)*100000-10000 +1):(p*100000+10000 + 1)
pos[1:2]
length(pos)
pos[length(pos)]
p = 3
pos = ((p-1)*100000-10000 +1):(p*100000+10000 + 1)
pos
range(pos)
#
pos1 = 1:110001#
write.table(pos1, file = "pos1", quote =F, col.names = F, row.names =F)#
for (p in 2:35){#
print(c(((p-1)*100000-10000 +1), (p*100000+10000 + 1)))#
pos = ((p-1)*100000-10000 +1):(p*100000+10000 + 1)#
write.table(pos, file = sprintf("pos%d", p),quote =F, col.names = F, row.names =F)#
#pos = ((i-1)*100000-10000 +1):(i*100000+10000 + 1)#
}
190001 + 20001 - 1
library(asSeq)
?pileupBAM
pileupBAM
?pie
949/0.047
?data.frame
140000 * 250
47000000/250
249000000/250
249/250
1104/2
library(asSeq)
?extractGC
`filterBAM` <-#
function(input, output=NULL, min.avgQ=10, min.mapQ=10,#
flag2kp=0, flag2rm=1796, phred=33,unique.reads=TRUE, skip=0){#
#
if(any(is.null(input))){stop("cannot continue without input file\n")}  #
input<-input[1]#
#
if(is.null(output)){#
output<-strsplit(input[1],split="/")[[1]]#
outlen<-length(output)#
output[outlen]<-strsplit(output[outlen],split=".bam")[[1]]#
output<-paste(output,collapse="/")#
}#
#
if(!all(file.exists(input))){ #
stop("cannot find some of the input files: ", input[!file.exists(input)], "\n") #
} #
#
num_files<-length(input)#
Z = .C("filter_bam", as.character(input),as.integer(num_files),as.character(output),#
as.double(min.avgQ),as.integer(min.mapQ),as.integer(flag2kp), as.integer(flag2rm), #
as.integer(phred),as.integer(unique.reads), as.integer(skip), PACKAGE="asSeq")#
return(c(paste(output,"filt.bam",sep="_"),input))#
}
`getUniqueBAM` <-#
function(input, output=NULL){#
if(any(is.null(input))){stop("cannot continue without input\n")}#
#
input<-input[1]#
#
if(is.null(output)){#
output<-strsplit(input[1],split="/")[[1]]#
outlen<-length(output)#
output[outlen]<-paste(strsplit(output[outlen],split=".bam")[[1]],"_u.bam",sep="")#
output<-paste(output,collapse="/")#
}#
#
if(!all(file.exists(input))){ #
stop("cannot find some of the input files: ", input[!file.exists(input)], "\n") #
}#
#
## num_files is always 1 for now. #
num_files<-length(input)#
#
Z = .C("getUnique_bam", as.character(input), as.integer(num_files),#
as.character(output), PACKAGE="asSeq")#
#
return(c(output,input))#
}
ls()
package.skeleton("test")
20000/3600
20000/3600/24
200000/3600/24
3 + 15 + 3 + 2 + 10 + 10 + 6 + 5 + 5
setwd("~/research/Dallas/exported_files/human/non-normalized/")#
#
dat1 = read.table("sample_gene_profile.txt", sep="\t", header=TRUE, #
as.is=TRUE, comment.char="", quote="\"")#
#
dim(dat1)#
dat1[1,]#
#
length(unique(dat1$SYMBOL))#
length(unique(dat1$SEARCH_KEY))#
length(unique(dat1$ILMN_GENE))#
#
summary(dat1$DRD1.AVG_Signal)#
#
hist(dat1$DRD1.AVG_Signal)
x = rnorm(8)
y = rnorm(3)
t.test(x, y)
pnorm(0.0221)
2*pnorm(-0.0221)
2752 + 1,895
2752 + 1895
x = rnorm(100)#
y = x + rnorm(100)#
z = y + rnorm(100)#
#
l1 = lm(y ~ x + z)#
summary(l1)
x = rnorm(100)#
y = x + rnorm(100)#
z = y + rnorm(100)#
#
x = x/sd(x)#
y = y/sd(y)#
z = z/sd(z)#
#
l1 = lm(y ~ x + z)#
summary(l1)
1663.18 + 1218.3
10^(-0.1)
10^(-0.04)
10^(-0.16)
83/2
83/72
library(genoCN)
?genoCNA
load("/Users/wsun/research/R/genoCN/data/init.Para.CNA.rda")
ls()
init.Para.CNA
34 + 43 + 72/2
(34 + 43 + 72)/2
#
plotIt <- function(dat1, grps){#
#
par(mar=c(5,4,1,1), bty="n")#
plot(dat1$qc.call.rate.all, dat1$contrast.qc, cex=0.5, pch=20, #
xlab="QC call rate", ylab="contrast QC", bty="n", type="n")#
abline(v=0.80, col="grey")#
abline(v=0.90, col="grey")#
abline(h=0.40, col="grey")#
#
#
t1 = table(grps)#
n1 = length(t1)#
u1 = names(t1)#
#
cols = rainbow(n1)#
#
if(n1 < 6){#
pnts = c(1, 15:(14+n1))#
}else{#
pnts = 1:n1#
}#
#
for(i in 1:length(u1)){#
ui   = u1[i]#
grp1 = which(as.character(grps) == ui)#
points(dat1$qc.call.rate.all[grp1], dat1$contrast.qc[grp1], #
cex=0.8, col=cols[i], pch=pnts[i])#
}#
#
u2 = paste(u1, "(", t1, ")", sep="")#
legend("topleft", u2, col=cols, pch=pnts, bty="n")#
#
}#
#
# --------------------------------------------------------------#
# read in QC results#
# --------------------------------------------------------------#
#
setwd("~/research/TCGA/BRCA/R_batch1")#
#
dat1 = read.table("apt-geno-qc.txt", sep="\t", header=TRUE, as.is=TRUE)#
dim(dat1)#
dat1[1:2,]#
#
sex = dat1$em.cluster.chrX.het.contrast_gender#
table(sex)#
#
# --------------------------------------------------------------#
# read in sample information#
# --------------------------------------------------------------#
#
sam1 = read.table("../info/brca_samples2use.txt", sep="\t", header=TRUE, as.is=TRUE)#
dim(sam1)#
sam1[1:2,]#
#
if(!all(dat1$cel_files == sam1$DNAnorml_arrayFile)){#
stop("sample mismatch!\n")  #
}
