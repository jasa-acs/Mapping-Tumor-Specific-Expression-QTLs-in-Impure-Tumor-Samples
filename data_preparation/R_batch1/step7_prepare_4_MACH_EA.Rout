
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> setwd("/Volumes/Moon/TCGA_BRCA/genotype_normal/")
> 
> # ------------------------------------------------------------
> # read data
> # ------------------------------------------------------------
> 
> date()
[1] "Tue Oct 23 21:25:22 2012"
> dat = read.table("birdseed-v2.calls.txt", header=TRUE, na.strings="-1")
> date()
[1] "Tue Oct 23 21:31:29 2012"
> 
> dim(dat)
[1] 909622    686
> dat[1:2,1:5]
    probeset_id BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_E10_697070.CEL
1 SNP_A-2131660                                                    2
2 SNP_A-1967418                                                    2
  CUSKS_p_TCGAb47_SNP_1N_GenomeWideSNP_6_F09_628240.CEL
1                                                     2
2                                                     2
  RANDS_p_TCGA_b109_SNP_1N_GenomeWideSNP_6_A11_771896.CEL
1                                                       2
2                                                       2
  JOUAL_p_TCGA_b96_SNP_N_GenomeWideSNP_6_A12_747988.CEL
1                                                     2
2                                                     2
> 
> table(dat[,2])

     0      1      2 
333099 243076 326357 
> table(is.na(dat[,2]))

 FALSE   TRUE 
902532   7090 
> 
> # ------------------------------------------------------------
> # read in the samples to be used
> # ------------------------------------------------------------
> 
> sam = read.table("../info/brca_samples2use_after_qc_female_caucasian.txt", 
+   header=TRUE, sep="\t", as.is=TRUE)
> dim(sam)
[1] 551  23
> sam[1,]
  DNAtumor_institution DNAtumor_patientID DNAtumor_type DNAtumor_portion
1                   A7               A0D9           01A              31D
  DNAtumor_plate                                   DNAtumor_arrayFile
1           A059 BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_H07_697072.CEL
  DNAnorml_institution DNAnorml_patientID DNAnorml_type DNAnorml_portion
1                   A7               A0D9           10A              01D
  DNAnorml_plate                                   DNAnorml_arrayFile
1           A059 BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_E10_697070.CEL
                     RNA_Exome             RNA_RNAseq.Tumor
1 TCGA-A7-A0D9-01A-31W-A071-09 TCGA-A7-A0D9-01A-31R-A056-07
             RNA_RNAseq.Normal              RNA_rnaseqID.Tumor
1 TCGA-A7-A0D9-11A-53R-A089-07 110318_SN749_0046_AB039FABXX_4_
                   RNA_rnaseqID.Normal RNA_institution RNA_patientID RNA_type
1 110909_UNC9-SN296_0240_BD0DDBABXX_1_              A7          A0D9      01A
  RNA_portion RNA_plate gender
1         31R      A056 female
> 
> mat1 = match(sam$DNAnorml_arrayFile, names(dat))
> 
> if(any(is.na(mat1))){
+   stop("some sampls in the sample file are not in the data\n")
+ }
> 
> dat = dat[,c(1,mat1)]
> dim(dat)
[1] 909622    552
> dat[1:2,1:5]
    probeset_id BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_E10_697070.CEL
1 SNP_A-2131660                                                    2
2 SNP_A-1967418                                                    2
  CUSKS_p_TCGAb47_SNP_1N_GenomeWideSNP_6_F09_628240.CEL
1                                                     2
2                                                     2
  RANDS_p_TCGA_b109_SNP_1N_GenomeWideSNP_6_A11_771896.CEL
1                                                       2
2                                                       2
  JOUAL_p_TCGA_b96_SNP_N_GenomeWideSNP_6_A12_747988.CEL
1                                                     2
2                                                     2
> 
> if(any(sam$DNAnorml_arrayFile != names(dat)[-1])){
+   stop("sample name mismatch\n")
+ }
> 
> # ------------------------------------------------------------
> # read in SNP annotation 
> # ------------------------------------------------------------
> 
> path = "/Users/suninsky/research/data/Affy/Affy6/anno/"
> date()
[1] "Tue Oct 23 21:31:35 2012"
> info = read.csv(sprintf("%s/GenomeWideSNP_6.na32.annot.csv", path), 
+                 as.is=TRUE, comment.char="#")
> date()
[1] "Tue Oct 23 21:37:05 2012"
> 
> names(info)
 [1] "Probe.Set.ID"                               
 [2] "dbSNP.RS.ID"                                
 [3] "Chromosome"                                 
 [4] "Physical.Position"                          
 [5] "Strand"                                     
 [6] "ChrX.pseudo.autosomal.region.1"             
 [7] "Cytoband"                                   
 [8] "Flank"                                      
 [9] "Allele.A"                                   
[10] "Allele.B"                                   
[11] "Associated.Gene"                            
[12] "Genetic.Map"                                
[13] "Microsatellite"                             
[14] "Fragment.Enzyme.Type.Length.Start.Stop"     
[15] "Allele.Frequencies"                         
[16] "Heterozygous.Allele.Frequencies"            
[17] "Number.of.individuals.Number.of.chromosomes"
[18] "In.Hapmap"                                  
[19] "Strand.Versus.dbSNP"                        
[20] "Copy.Number.Variation"                      
[21] "Probe.Count"                                
[22] "ChrX.pseudo.autosomal.region.2"             
[23] "In.Final.List"                              
[24] "Minor.Allele"                               
[25] "Minor.Allele.Frequency"                     
[26] "X..GC"                                      
[27] "OMIM"                                       
> table(info$Chromosome)

  ---     1    10    11    12    13    14    15    16    17    18    19     2 
 1846 73403 49592 45933 43797 35143 28939 26865 28622 21300 27213 12419 75842 
   20    21    22     3     4     5     6     7     8     9    MT     X     Y 
23486 12910 11951 62277 57556 57945 57818 48283 49992 42663   411 37902   860 
> table(info$Strand)

     +      -    --- 
465582 466047   3339 
> 
> dim(info)
[1] 934968     27
> info[1:2,1:4]
   Probe.Set.ID dbSNP.RS.ID Chromosome Physical.Position
1 SNP_A-1780419   rs6576700          1          84875173
2 SNP_A-1780418  rs17054099          5         156390980
> ## some SNPs have more than more probe.Set
> length(unique(info$Probe.Set.ID))
[1] 934968
> length(unique(info$dbSNP.RS.ID))
[1] 931980
> 
> dim(dat)
[1] 909622    552
> dat[1:2,1:4]
    probeset_id BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_E10_697070.CEL
1 SNP_A-2131660                                                    2
2 SNP_A-1967418                                                    2
  CUSKS_p_TCGAb47_SNP_1N_GenomeWideSNP_6_F09_628240.CEL
1                                                     2
2                                                     2
  RANDS_p_TCGA_b109_SNP_1N_GenomeWideSNP_6_A11_771896.CEL
1                                                       2
2                                                       2
> length(unique(dat$probeset_id))
[1] 909622
> 
> # ------------------------------------------------------------
> # extract data 
> # ------------------------------------------------------------
> 
> if(! all(dat$probeset_id %in% info$Probe.Set.ID)){
+   stop("some probeset_id in data file are not recognized\n")
+ }
> 
> info = info[match(dat$probeset_id, info$Probe.Set.ID),]
> dim(info)
[1] 909622     27
> all(dat$probeset_id == info$Probe.Set.ID)
[1] TRUE
> table(info$Chromosome)

  ---     1    10    11    12    13    14    15    16    17    18    19     2 
 1182 71480 48314 44671 42672 34382 28169 26126 27768 20687 26623 11955 74078 
   20    21    22     3     4     5     6     7     8     9    MT     X     Y 
22906 12584 11471 60838 56174 56592 56420 47091 48749 41528   107 36767   288 
> 
> tb1 = table(info$dbSNP.RS.ID)
> table(tb1)
tb1
     1      2 
903784   2919 
> 
> snp2 = names(tb1)[tb1>1]
> length(snp2)
[1] 2919
> snp2[1:5]
[1] "rs10001320" "rs10005921" "rs10006892" "rs10007534" "rs10007865"
> 
> w2rm1 = which(info$Chromosome == "---" | info$Strand == "---")
> w2rm2 = setdiff(which(info$dbSNP.RS.ID %in% snp2), match(snp2, info$dbSNP.RS.ID))
> 
> w2rm  = union(w2rm1, w2rm2)
> length(w2rm1)
[1] 2279
> length(w2rm2)
[1] 2919
> length(w2rm)
[1] 5187
> 
> if(length(w2rm) > 0){
+   info = info[-w2rm,]
+   dat  = dat[-w2rm,]
+ }
> 
> dim(info)
[1] 904435     27
> dim(dat)
[1] 904435    552
> table(info$Chromosome)

    1    10    11    12    13    14    15    16    17    18    19     2    20 
71151 48110 44441 42459 34232 28041 26009 27652 20577 26510 11863 73791 22821 
   21    22     3     4     5     6     7     8     9    MT     X     Y 
12529 11420 60594 55918 56337 56161 46840 48556 41358   103 36714   248 
> length(unique(info$Probe.Set.ID))
[1] 904435
> length(unique(info$dbSNP.RS.ID))
[1] 904435
> 
> # ------------------------------------------------------------
> # sort by SNP location 
> # ------------------------------------------------------------
> 
> chrs = info$Chromosome
> chrs[which(chrs=="X")]   = "23"
> chrs[which(chrs=="Y")]   = "24"
> chrs[which(chrs=="MT")]  = "25"
> 
> table(chrs)
chrs
    1    10    11    12    13    14    15    16    17    18    19     2    20 
71151 48110 44441 42459 34232 28041 26009 27652 20577 26510 11863 73791 22821 
   21    22    23    24    25     3     4     5     6     7     8     9 
12529 11420 36714   248   103 60594 55918 56337 56161 46840 48556 41358 
> chrs = as.numeric(chrs)
> table(chrs)
chrs
    1     2     3     4     5     6     7     8     9    10    11    12    13 
71151 73791 60594 55918 56337 56161 46840 48556 41358 48110 44441 42459 34232 
   14    15    16    17    18    19    20    21    22    23    24    25 
28041 26009 27652 20577 26510 11863 22821 12529 11420 36714   248   103 
> 
> pos  = as.numeric(info$Physical.Position)
> summary(pos)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
      408  31740000  69920000  78740000 115700000 249200000 
> 
> od   = order(chrs, pos)
> 
> info = info[od,]
> dat  = dat[od,]
> 
> dim(info)
[1] 904435     27
> info[1:5,1:4]
        Probe.Set.ID dbSNP.RS.ID Chromosome Physical.Position
788828 SNP_A-8575125  rs10458597          1            564621
923156 SNP_A-8709646  rs12565286          1            721290
711629 SNP_A-8497791  rs12082473          1            740857
93734  SNP_A-1909444   rs3094315          1            752566
572021 SNP_A-8358063   rs2286139          1            761732
> 
> dim(dat)
[1] 904435    552
> dat[1:2,1:2]
         probeset_id BITES_p_TCGAb61_SNP_S_GenomeWideSNP_6_E10_697070.CEL
906474 SNP_A-8575125                                                    0
745070 SNP_A-8709646                                                    0
> 
> if(! all(dat$probeset_id == info$Probe.Set.ID)){
+   stop("probeset_id mismatch\n")
+ }
> 
> # ------------------------------------------------------------
> # remove the SNPs that have more than 5% missing values 
> # ------------------------------------------------------------
> 
> pdata = data.matrix(dat[,-1])
> dim(pdata)
[1] 904435    551
> 
> nNA = rowSums(is.na(pdata))
> summary(nNA)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.000   2.000   9.023   7.000 551.000 
> 
> w2rm = which(nNA > 0.05*ncol(pdata))
> length(w2rm)
[1] 72101
> 
> if(length(w2rm) > 0){
+   dat   = dat[-w2rm,]
+   info  = info[-w2rm,]
+   pdata = pdata[-w2rm,]
+ }
> 
> dim(dat)
[1] 832334    552
> dim(info)
[1] 832334     27
> dim(pdata)
[1] 832334    551
> 
> # ------------------------------------------------------------
> # switch to forward strand
> # ------------------------------------------------------------
> 
> table(info$Strand)

     +      - 
415834 416500 
> table(info$Strand.Versus.dbSNP)

reverse    same 
 412461  419873 
> table(info$Strand, info$Strand.Versus.dbSNP)
   
    reverse   same
  +   64304 351530
  -  348157  68343
> 
> table(info$Allele.A)

     A      C      G 
406334 368915  57085 
> table(info$Allele.B)

     C      G      T 
 73827 355194 403313 
> 
> switchStrand <- function(xx){
+ 	wA = which(xx == "A")
+ 	wC = which(xx == "C")
+ 	wG = which(xx == "G")
+ 	wT = which(xx == "T")
+   
+   if(length(wA) > 0){ xx[wA] = "T" }
+   if(length(wT) > 0){ xx[wT] = "A" }
+   if(length(wC) > 0){ xx[wC] = "G" }
+   if(length(wG) > 0){ xx[wG] = "C" }
+   
+   xx
+ }
> 
> wRev = which(info$Strand == "-")
> 
> info$Allele.A.Forward = info$Allele.A
> info$Allele.A.Forward[wRev] = switchStrand(info$Allele.A[wRev])
> 
> info$Allele.B.Forward = info$Allele.B
> info$Allele.B.Forward[wRev] = switchStrand(info$Allele.B[wRev])
> 
> table(info$Allele.A, info$Allele.A.Forward)
   
         A      C      G      T
  A 202966      0      0 203368
  C      0 184315 184600      0
  G      0  28532  28553      0
> table(info$Allele.B, info$Allele.B.Forward)
   
         A      C      G      T
  C      0  36957  36870      0
  G      0 177840 177354      0
  T 201790      0      0 201523
> 
> # ------------------------------------------------------------
> # further check MAF
> # ------------------------------------------------------------
> 
> MAF = 0.5*rowSums(pdata, na.rm=TRUE)/rowSums((!is.na(pdata)), na.rm=TRUE)
> MAF = pmin(MAF, 1 - MAF)
> summary(MAF)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.00000 0.05683 0.18340 0.20170 0.33460 0.50000 
> 
> xx = strsplit(info$Minor.Allele.Frequency, split=" // ", fixed=TRUE)
> table(sapply(xx, length))

     5 
832334 
> xx = matrix(unlist(xx), ncol=5, byrow=TRUE)
> xx = as.numeric(xx[,1])
> 
> cor(MAF, xx)^2
[1] 0.9463507
> 
> png("../figures/MAF_data_vs_affy_anno_Caucasian.png", width=5, height=5, 
+   res=200, units="in")
> par(mar=c(5,4,1,1))
> smoothScatter(xx, MAF, xlab="MAF @ Caucasian", ylab="MAF @ Caucasian sample")
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------
> # generate genotype data in terms of nucleotides for all 
> # SNPs for MACH
> # ------------------------------------------------------------
> 
> uchrs  = unique(info$Chromosome)
> 
> for(chr1 in uchrs){
+   message("\n", chr1, " ", date())
+ 
+   wchr   = which(info$Chromosome == chr1)
+   
+   if(any(diff(wchr) != 1)){
+     stop("SNPs are not ordered\n")  
+   }
+     
+   snps   = info$dbSNP.RS.ID[wchr]
+   pdata1 = pdata[wchr,]
+   info1  = info[wchr,]
+   datPed = matrix("0", nrow=ncol(pdata1), ncol=2*nrow(pdata1))
+ 
+   samID  = sam$DNAnorml_patientID
+   famID  = 1:nrow(datPed)
+   father = rep(0, nrow(datPed))
+   mother = rep(0, nrow(datPed))
+   sex    = rep("f", nrow(datPed))
+   
+   for(i in 1:nrow(pdata1)){
+     
+     if(i %% 10000 == 0){
+       message("  ", i, " ", date())
+     }
+     
+     w0 = which(pdata1[i,] == 0)  
+     w1 = which(pdata1[i,] == 1)  
+     w2 = which(pdata1[i,] == 2)
+     
+     if(length(w0)>0){
+       datPed[w0,c(2*i-1, 2*i)] = info1$Allele.A.Forward[i]
+     }
+     
+     if(length(w1)>0){
+       datPed[w1,2*i-1] = info1$Allele.A.Forward[i]
+       datPed[w1,2*i]   = info1$Allele.B.Forward[i]
+     }
+     
+     if(length(w2)>0){
+       datPed[w2,c(2*i-1, 2*i)] = info1$Allele.B.Forward[i]
+     }
+   }
+   datPed = cbind(famID, samID, father, mother, sex, datPed)
+   
+   ff1 = sprintf("../data_EA/genotype_ped_chr%s_forward.txt", chr1)
+   ff2 = sprintf("../data_EA/genotype_marker_chr%s.txt", chr1)
+ 
+   write.table(datPed, file = ff1, append = FALSE, quote = FALSE, 
+               sep = " ", row.names = FALSE, col.names = FALSE)
+   
+   datMak = cbind(rep("M", length(snps)), snps)
+ 
+   write.table(datMak, file = ff2, append = FALSE, quote = FALSE, 
+               sep = " ", row.names = FALSE, col.names = FALSE)
+ 
+ }

1 Tue Oct 23 21:41:11 2012
  10000 Tue Oct 23 21:41:18 2012
  20000 Tue Oct 23 21:41:22 2012
  30000 Tue Oct 23 21:41:24 2012
  40000 Tue Oct 23 21:41:28 2012
  50000 Tue Oct 23 21:41:30 2012
  60000 Tue Oct 23 21:41:33 2012

2 Tue Oct 23 21:42:06 2012
  10000 Tue Oct 23 21:42:13 2012
  20000 Tue Oct 23 21:42:22 2012
  30000 Tue Oct 23 21:42:24 2012
  40000 Tue Oct 23 21:42:28 2012
  50000 Tue Oct 23 21:42:31 2012
  60000 Tue Oct 23 21:42:33 2012

3 Tue Oct 23 21:43:10 2012
  10000 Tue Oct 23 21:43:14 2012
  20000 Tue Oct 23 21:43:18 2012
  30000 Tue Oct 23 21:43:20 2012
  40000 Tue Oct 23 21:43:23 2012
  50000 Tue Oct 23 21:43:26 2012

4 Tue Oct 23 21:43:56 2012
  10000 Tue Oct 23 21:44:00 2012
  20000 Tue Oct 23 21:44:04 2012
  30000 Tue Oct 23 21:44:06 2012
  40000 Tue Oct 23 21:44:10 2012
  50000 Tue Oct 23 21:44:12 2012

5 Tue Oct 23 21:44:36 2012
  10000 Tue Oct 23 21:44:42 2012
  20000 Tue Oct 23 21:44:45 2012
  30000 Tue Oct 23 21:44:47 2012
  40000 Tue Oct 23 21:44:51 2012
  50000 Tue Oct 23 21:44:53 2012

6 Tue Oct 23 21:45:17 2012
  10000 Tue Oct 23 21:45:24 2012
  20000 Tue Oct 23 21:45:28 2012
  30000 Tue Oct 23 21:45:30 2012
  40000 Tue Oct 23 21:45:34 2012
  50000 Tue Oct 23 21:45:36 2012

7 Tue Oct 23 21:46:02 2012
  10000 Tue Oct 23 21:46:08 2012
  20000 Tue Oct 23 21:46:12 2012
  30000 Tue Oct 23 21:46:15 2012
  40000 Tue Oct 23 21:46:18 2012

8 Tue Oct 23 21:46:38 2012
  10000 Tue Oct 23 21:46:42 2012
  20000 Tue Oct 23 21:46:46 2012
  30000 Tue Oct 23 21:46:48 2012
  40000 Tue Oct 23 21:46:51 2012

9 Tue Oct 23 21:47:11 2012
  10000 Tue Oct 23 21:47:17 2012
  20000 Tue Oct 23 21:47:19 2012
  30000 Tue Oct 23 21:47:22 2012

10 Tue Oct 23 21:47:40 2012
  10000 Tue Oct 23 21:47:45 2012
  20000 Tue Oct 23 21:47:49 2012
  30000 Tue Oct 23 21:47:51 2012
  40000 Tue Oct 23 21:47:55 2012

11 Tue Oct 23 21:48:15 2012
  10000 Tue Oct 23 21:48:20 2012
  20000 Tue Oct 23 21:48:22 2012
  30000 Tue Oct 23 21:48:26 2012
  40000 Tue Oct 23 21:48:28 2012

12 Tue Oct 23 21:48:45 2012
  10000 Tue Oct 23 21:48:50 2012
  20000 Tue Oct 23 21:48:52 2012
  30000 Tue Oct 23 21:48:56 2012

13 Tue Oct 23 21:49:14 2012
  10000 Tue Oct 23 21:49:19 2012
  20000 Tue Oct 23 21:49:23 2012
  30000 Tue Oct 23 21:49:25 2012

14 Tue Oct 23 21:49:39 2012
  10000 Tue Oct 23 21:49:44 2012
  20000 Tue Oct 23 21:49:46 2012

15 Tue Oct 23 21:49:59 2012
  10000 Tue Oct 23 21:50:02 2012
  20000 Tue Oct 23 21:50:06 2012

16 Tue Oct 23 21:50:16 2012
  10000 Tue Oct 23 21:50:21 2012
  20000 Tue Oct 23 21:50:23 2012

17 Tue Oct 23 21:50:35 2012
  10000 Tue Oct 23 21:50:39 2012

18 Tue Oct 23 21:50:50 2012
  10000 Tue Oct 23 21:50:53 2012
  20000 Tue Oct 23 21:50:57 2012

19 Tue Oct 23 21:51:08 2012
  10000 Tue Oct 23 21:51:10 2012

20 Tue Oct 23 21:51:15 2012
  10000 Tue Oct 23 21:51:20 2012
  20000 Tue Oct 23 21:51:28 2012

21 Tue Oct 23 21:51:37 2012
  10000 Tue Oct 23 21:51:40 2012

22 Tue Oct 23 21:51:45 2012
  10000 Tue Oct 23 21:51:49 2012

X Tue Oct 23 21:51:54 2012
  10000 Tue Oct 23 21:51:57 2012
  20000 Tue Oct 23 21:52:01 2012
  30000 Tue Oct 23 21:52:05 2012

Y Tue Oct 23 21:52:19 2012

MT Tue Oct 23 21:52:19 2012
> 
> 
> 
> proc.time()
    user   system  elapsed 
1457.511  129.006 1617.442 
